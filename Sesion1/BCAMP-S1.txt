PREGUNTA 1
//https://blazor-conduit.netlify.app/

^SIGN UP - NEW USER
	BEGIN 
		INPUT Username, Email, Password
		SUBMIT Sign up button
		OUTPUT Homepage
	END 
		
^VALIDATE ERROR empty fields
	BEGIN 
		SUBMIT Sign up button
		OUTPUT "Username is required", "Email is required", "Password is required"
	END 

^VALIDATE ERROR email has already been taken
	BEGIN
		INPUT Username, Email, Password
		SUBMIT Sign up button
			IF Email = "s@mail.com" THEN
				OUTPUT "email has already been taken"
			ELSE
				OUTPUT Homepage
			ENDIF
	END

^VALIDATE ERROR username has already been taken
	BEGIN
		INPUT Username, Email, Password
		SUBMIT Sign up button
			IF Username = "a" THEN
				OUTPUT "username has already been taken"
			ELSE
				OUTPUT Homepage
			ENDIF
	END


^LOG IN
	BEGIN 
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage
	END 
 
^VALIDATE ERROR empty fields
	BEGIN 
		SUBMIT Sign in button
		OUTPUT "Email is required", "Password is required"
	END 
 
^VALIDATE ERROR wrong password
	BEGIN
		INPUT Email, Password
		SUBMIT Sign up button
			IF Email = "sa@mail.com" and Password = "123" THEN
				OUTPUT Homepage
			ELSE
				OUTPUT "email or password is invalid"
			ENDIF
	END

^VALIDATE SETTINGS IS DISPLAYED
	BEGIN
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage, Settings button
	END

^VALIDATE PROFILE IS DISPLAYED
	BEGIN
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage, Settings button
	END

^VALIDATE NEW ARTICLE IS NOT WORKING
	BEGIN
		INPUT Tittle, Description, Body
		SUBMIT Publish Article button
		OUTPUT New Article
	END
 
^VALIDATE SETTINGS IS NOT WORKING
	BEGIN
		INPUT Url, Username, Bio, Email, Password
		SUBMIT Update Settings button
		OUTPUT Your Settings
	END

^VALIDATE PROFILE
	BEGIN
		OUTPUT My articles, Favorited articles
	END


------------------------------------------------------------------

https://dev--taupe-pithivier-3c339a.netlify.app/#/

^SIGN UP - NEW USER
	BEGIN 
		INPUT Username, Email, Password
		SUBMIT Sign up button
		OUTPUT Homepage
	END 
		
^VALIDATE ERROR empty fields
	BEGIN 
		SUBMIT Sign up button
		OUTPUT "email can't be blank"
		INPUT Email
		SUBMIT Sign up button
		OUTPUT "username can't be blank"
		INPUT Username
		SUBMIT Sign up button
		OUTPUT "password can't be blank"
	END 

^VALIDATE ERROR email has already been taken
	BEGIN
		INPUT Username, Email, Password
		SUBMIT Sign up button
			IF Email = "aqw" THEN
				OUTPUT "email has already been taken"
			ELSE
				OUTPUT Homepage
			ENDIF
	END

^VALIDATE ERROR username has already been taken
	BEGIN
		INPUT Username, Email, Password
		SUBMIT Sign up button
			IF Username = "aqw" THEN
				OUTPUT "username has already been taken"
			ELSE
				OUTPUT Homepage
			ENDIF
	END

^LOG IN
	BEGIN 
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage
	END 
 
^VALIDATE ERROR empty fields
	BEGIN
		SUBMIT Sign in button
		OUTPUT "email can't be blank"
	END 
 
^VALIDATE ERROR wrong password
	BEGIN
		INPUT Email, Password
		SUBMIT Sign up button
			IF Email = "aqw" and Password = "1" THEN
				OUTPUT Homepage
			ELSE
				OUTPUT "email or password is invalid"
			ENDIF
	END

^VALIDATE SETTINGS IS DISPLAYED
	BEGIN
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage, Settings button
	END

^VALIDATE PROFILE IS DISPLAYED
	BEGIN
		INPUT Email, Password
		SUBMIT Sign in button
		OUTPUT Homepage, Settings button
	END

^VALIDATE NEW ARTICLE
	BEGIN
		INPUT Tittle, Description, Body
		SUBMIT Publish Article button
		OUTPUT Article details
	END
 
^VALIDATE SETTINGS
	BEGIN
		INPUT Username, Bio, Email, Password
		SUBMIT Update Settings button
		OUTPUT New Username, New Bio
	END

^VALIDATE PROFILE
	BEGIN
		OUTPUT My articles, Favorited articles
	END


PREGUNTA 2


PREGUNTA 3
Buenas practicas:
-Asegurarse que los test cases a automatizar sean relevantes y mantenibles 
-Definir un scope que sea claro y alcanzable
-Mantener un codigo limpio y que sea entendible

Malas practicas:
-Querer automatizar todos los test cases
-Automatizar test cases de aplicaciones cambiantes constantemente

PREGUNTA 4
Buenos candidatos:
-Las tareas que se repiten, test cases que se ejecutan en smoke test
-Pruebas que tienen un alto impacto en el proyecto

Malos candidatos:
-Pruebas que no tienen mucho impacto en el proyecto
-Pruebas que tienen un flujo demasiado complejo

PREGUNTA 5
BST-UpdateTestCases-Auto-AttedanceSpace-Sprint40
BST-AddNewUsersQA-ScriptsAuto-Wallboard
BST-RemoveDeprecatedTestCases-Auto-PerformanceReview

PREGUNTA 6
Las diferencias son que el Unit testing tiene un menor costo, comprende un limitado scope y se testea solo por partes del codigo.
En cambio el Integration testing es mucho mas costoso por su complejidad, su scope abarca mas debido a su integracion con componentes, y se testea muchos modulos o en conjunto.
 

